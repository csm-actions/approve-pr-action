name: Approve Pull Requests
description: Approve Pull Requests
inputs:
  allowed_committers:
    description: |
      A list of allowed committers.
    required: true
  github_token:
    description: |
      GitHub Access token to approve pull requests.
      `pull_requests:write` permission is required.
    required: true
runs:
  using: composite
  steps:
    # Get data from the label
    - id: info
      shell: bash
      env:
        # ${repo}/${pull_request_number}
        LABEL_DESCRIPTION: ${{ github.event.label.description }}
      run: |
        repo_full_name=${LABEL_DESCRIPTION%/*}
        {
          echo "repo_full_name=${repo_full_name}"
          echo "repo=${repo_full_name#*/}"
          echo "pr_number=${LABEL_DESCRIPTION##*/}"
        } >> "$GITHUB_OUTPUT"

    # List commits and their authors
    - id: pr
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ steps.info.outputs.repo }}
        NUMBER: ${{ steps.info.outputs.pr_number }}
      run: |
        resp=$(gh api graphql \
          --paginate --slurp \
          -F "owner=$REPO_OWNER" \
          -F "repo=$REPO_NAME" \
          -F "pr=$NUMBER" -f query='
          query($owner: String!, $repo: String!, $pr: Int!, $endCursor: String) {
            repository(owner: $owner, name: $repo) {
              pullRequest(number: $pr) {
                commits(first: 100, after: $endCursor) {
                  totalCount
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  nodes {
                    commit {
                      oid
                      committer {
                        user {
                          login
                        }
                      }
                      signature {
                        isValid
                      }
                    }
                  }
                }
              }
            }
          }
        ')
        {
          echo 'value<<EOF'
          echo "$resp"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    # validate
    - uses: actions/github-script@v7
      id: validate
      env:
        ALLOWED_COMMITTERS: ${{ inputs.allowed_committers }}
        PR: ${{ steps.pr.outputs.value }}
      with:
        script: |
          const payloads = JSON.parse(process.env.PR);
          const allowedCommitters = new Set(process.env.ALLOWED_COMMITTERS.trim().split('\n'));

          // .[].data.repository.pullRequest.commits.nodes[].commit
          // oid, committer.user.login, signagture.isValid
          let lastSHA = "";
          for (const payload of payloads) {
            for (const node of payload.data.repository.pullRequest.commits.nodes) {
              const commit = node.commit;
              lastSHA = commit.oid;
              if (!commit.signature || !commit.signature.isValid) {
                core.setFailed(`commit signature must be valid: ${commit.oid}`);
              }
              const user = commit.committer.user;
              if (!user) {
                core.setFailed(`committer must not be null: ${node.commit.oid}`);
              }
              if (!allowedCommitters.has(user.login)) {
                core.setFailed(`the commit isn't allowed: committer=${user.login} sha=${node.commit.oid}`);
              }
            }
          }
          core.setOutput('last_sha', lastSHA);

    # Approve the pull request
    - shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        REPO: ${{ steps.info.outputs.repo_full_name }}
        NUMBER: ${{ steps.info.outputs.pr_number }}
        SHA: ${{ steps.validate.outputs.last_sha }}
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/pulls/$NUMBER/reviews" \
          -f "commit_id=$SHA" \
          -f "event=APPROVE"

    # Create a pull request comment to report an error
    - if: failure()
      shell: bash
      env:
        GH_TOKEN: ${{ steps.token.outputs.token }}
        REPO: ${{ steps.info.outputs.repo_full_name }}
        NUMBER: ${{ steps.info.outputs.pr_number }}
        COMMENT: |
          ## :x: Failed to approve this pull request

          [Workflow](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
      run: |
        gh pr comment \
          -R "$REPO" \
          -b "${COMMENT}" \
          "$NUMBER"
